#+title: Haskell Maze Generator

Generate mazes using different algorithms in Haskell.

Example Binary Tree:
#+begin_src
+---+---+---+---+---+---+---+---+---+
|       |       |       |           |
+---+   +---+   +---+   +---+---+   +
|   |   |   |   |           |       |
+   +   +   +   +---+---+   +---+   +
|           |               |       |
+---+---+   +---+---+---+   +---+   +
|           |           |   |   |   |
+---+---+   +---+---+   +   +   +   +
|       |               |   |       |
+---+   +---+---+---+   +   +---+   +
|   |   |   |   |       |       |   |
+   +   +   +   +---+   +---+   +   +
|   |       |   |   |   |           |
+   +---+   +   +   +   +---+---+   +
|                   |       |   |   |
+---+---+---+---+   +---+   +   +   +
|                                   |
+---+---+---+---+---+---+---+---+---+
#+end_src

*** Ideas to improve
**** TODO
Could I use the state of the maze during generation in a different way to the state during the solve? It seems that most algorithms could use the state as the visited cells and then clear and reuse for the solve. Might make sense to create a new maze within the generate maze steps.
**** TODO
Return errors. Could make the return type of generation
```Haskell
Either SomeError ()
```
**** TODO
move to [[https://diagrams.github.io/][diagrams]]
**** TODO
draw from the state of the monad. This might help with the animation too
